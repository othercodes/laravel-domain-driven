name: Test

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [ 'master', 'develop' ]
  pull_request:
    types: [ 'opened', 'synchronize', 'reopened' ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: [ '8.2', '8.3', '8.4']

    env:
      APP_ENV: testing
      LOG_CHANNEL: single
      LOG_LEVEL: debug
      DB_CONNECTION: mysql
      DB_DATABASE: laravel
      DB_USERNAME: sail
      DB_PASSWORD: password
      DB_PORT: 3306

    services:
      database:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_USER: ${{ env.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ env.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ env.DB_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASSWORD }}
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring
          coverage: xdebug
          tools: composer:v2

      - name: Cache PHP dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: php-${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: php-${{ matrix.php-version }}-composer-

      - name: Validate Composer Manifest
        run: composer validate

      - name: Install PHP Dependencies
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --no-suggest

      - name: Install NodeJS Dependencies
        run: npm install

      - name: Build Frontend
        run: npm run build

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Prepare .env File
        run: cp .env.example .env

      - name: Generate Application Key
        run: echo "APP_KEY=$(php artisan key:generate --show)" >> $GITHUB_ENV

      - name: Deploy Database Schema
        run: |
          php artisan migrate --no-interaction -v
          php artisan db:seed --no-interaction -v

      - name: Check Code Style
        run: vendor/bin/pint

      - name: Static Code Analysis
        run: vendor/bin/phpstan analyse --memory-limit=4G --no-progress

      - name: Execute Unit, Integration and Acceptance Tests
        run: php artisan test --ci --coverage-clover=coverage.xml --log-junit=test.xml -vvv
